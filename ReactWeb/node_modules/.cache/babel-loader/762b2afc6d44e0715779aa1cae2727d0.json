{"ast":null,"code":"var _jsxFileName = \"/Users/vineetrai/ps-globomantics-webapi-react/ReactWeb/src/ValidationSummary.tsx\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ValidationSummary = _ref => {\n  var _error$response, _error$response2;\n\n  let {\n    error\n  } = _ref;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) !== 400) return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  const errors = (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data.errors;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-danger\",\n      children: \"Please fix the following:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), Object.entries(errors).map(_ref2 => {\n      let [key, value] = _ref2;\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [key, \": \", value.join(\", \")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true);\n};\n\n_c = ValidationSummary;\nexport default ValidationSummary;\n\nvar _c;\n\n$RefreshReg$(_c, \"ValidationSummary\");","map":{"version":3,"sources":["/Users/vineetrai/ps-globomantics-webapi-react/ReactWeb/src/ValidationSummary.tsx"],"names":["ValidationSummary","error","response","status","errors","data","Object","entries","map","key","value","join"],"mappings":";;;;AAOA,MAAMA,iBAAiB,GAAG,QAAqB;AAAA;;AAAA,MAApB;AAAEC,IAAAA;AAAF,GAAoB;AAC7C,MAAI,oBAAAA,KAAK,CAACC,QAAN,oEAAgBC,MAAhB,MAA2B,GAA/B,EAAoC,oBAAO,qCAAP;AACpC,QAAMC,MAAM,uBAAGH,KAAK,CAACC,QAAT,qDAAG,iBAAgBG,IAAhB,CAAqBD,MAApC;AACA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGE,MAAM,CAACC,OAAP,CAAeH,MAAf,EAAuBI,GAAvB,CAA2B;AAAA,UAAC,CAACC,GAAD,EAAMC,KAAN,CAAD;AAAA,0BAC1B;AAAA,+BACE;AAAA,qBACGD,GADH,QACUC,KAAK,CAACC,IAAN,CAAW,IAAX,CADV;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,SAASF,GAAT;AAAA;AAAA;AAAA;AAAA,cAD0B;AAAA,KAA3B,CAFH;AAAA,kBADF;AAYD,CAfD;;KAAMT,iB;AAiBN,eAAeA,iBAAf","sourcesContent":["import { AxiosError } from \"axios\";\nimport Problem from \"./types/problem\";\n\ntype Args = {\n  error: AxiosError<Problem>;\n};\n\nconst ValidationSummary = ({ error }: Args) => {\n  if (error.response?.status !== 400) return <></>;\n  const errors = error.response?.data.errors;\n  return (\n    <>\n      <div className=\"text-danger\">Please fix the following:</div>\n      {Object.entries(errors).map(([key, value]) => (\n        <ul key={key}>\n          <li>\n            {key}: {value.join(\", \")}\n          </li>\n        </ul>\n      ))}\n    </>\n  );\n};\n\nexport default ValidationSummary;\n"]},"metadata":{},"sourceType":"module"}